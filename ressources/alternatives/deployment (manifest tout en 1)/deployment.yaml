apiVersion: v1
kind: Namespace
metadata:
  name: devops-demo

---

apiVersion: v1
kind: Secret
metadata:
  name: mongo-credentials
  namespace: devops-demo
type: Opaque
data:
  username: cm9vdA==
  password: dGVzdDEyMzQ=

---

apiVersion: v1
kind: Service
metadata:
  name: flask
  namespace: devops-demo
spec:
  selector:
    app: flask
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-deployment
  namespace: devops-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      containers:
        - name: flask-container
          image: ashram939/projet-flask-v0.1:0c1d9b4d8a9588a4944e40b71baab24158f887b2
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 256Mi
              cpu: 200m
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_HOST
              value: mongo-service
            - name: MONGO_PORT
              value: "27017"
            - name: MONGO_DB
              value: devops
            - name: MONGO_COLLECTION
              value: users
            - name: MONGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-credentials
                  key: username
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-credentials
                  key: password

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: devops-demo
spec:
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: devops-demo
spec:
  serviceName: "mongo-service"
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:latest
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 256Mi
              cpu: 200m
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-credentials
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-credentials
                  key: password
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d/init.js
              subPath: init.js
      volumes:
        - name: mongo-persistent-storage
          persistentVolumeClaim:
            claimName: mongo-persistent-storage
        - name: init-script
          configMap:
            name: mongo-init-script

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-persistent-storage
  namespace: devops-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-script
  namespace: devops-demo
data:
  init.js: | 
    db = db.getSiblingDB('devops');
    db.users.insertMany([
      { firstName: "Emma", lastName: "Brown", age: 30, email: "emma.brown@example.com" },
      { firstName: "Alice", lastName: "Smith", age: 25, email: "alice.smith@example.com" },
      { firstName: "Bob", lastName: "Johnson", age: 28, email: "bob.johnson@example.com" }
    ]);

